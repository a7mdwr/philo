==> handle_errors.c <==
#include "philo.h"
 
void free_all(t_philo *p)
{
	int i;
	
	i = 0;
	if (!p || !p->share)
        return ;
	
}

void	*safe_malloc(size_t size)
{
	void	*a;

	a = malloc(size);
	if (a == NULL)
	{
		error_exit("Error: malloc failed\n");
		return(0);
	}
	return (a);
}

void error_exit(char *error)
{
	printf("%s\n", error);
	return ;
}

==> init.c <==
# include "philo.h"

t_philo *philo(t_philo *p, char **av)
{
    p = safe_malloc(sizeof(t_philo) * ft_atoi(av[1]));
    p->died = 0;
    p->share = safe_malloc(sizeof(t_share));
    p->share->philos = ft_atoi(av[1]);
    p->share->time_to_die = ft_atoi(av[2]) * 1000;
    p->share->time_to_eat = ft_atoi(av[3]) * 1000;
    p->share->time_to_sleep = ft_atoi(av[4]) * 1000;
    p->share->starting_time = get_time();
    return (p);
}

void    data_init(t_philo *p)
{
    int i;

    i = 0;
    printf("%d\n\n", p->share->philos);
    p->share->forks = safe_malloc(sizeof(pthread_mutex_t) * p->share->philos);
    while (i < p->share->philos)
    {
        pthread_mutex_init(&p->share->forks[i], NULL);
        p[i].share = p->share;
        p[i].left_fork = i;
		p[i].right_fork = (i + 1) % p->share->philos;
        i++;
    }
}
==> main.c <==

#include "philo.h"

int main(int ac, char **av)
{
    t_philo *p;
    int i;

    i = 0;
    p = NULL;
    if (ac != 5 && ac != 6)
        return(error_exit("Error: wrong number of arguments"), 0);
    p = philo(p, av);
    if(!check(av, ac))
        return(0);
    data_init(p);
    start_simulation(p);
    while (1)
    {
        if(!check_for_die(p))
        {
            while (i < p->share->philos)
            {
                pthread_join(p[i].thread_id, NULL);
                i++;
            }
            return 0;
        }
    }
    return (0);
}
==> pars.c <==
#include "philo.h"


int check(char **av, int ac)
{
    int j;
    int i;

    j = 1;
    while(ac > j)
    {
        i = 0;
        while(av[j][i])
        {
            if(!ft_isdigit(av[j][i]))
                return (error_exit("Error : Non-numeric"), 0);
            i++;
        }
        j++;
    }
    return (1);
}

// int    parsing(t_philo *p, char **av)
// {
//     (void)p;
//     if (!p->share->philos || !p->share->time_to_die || !p->share->time_to_eat|| !p->share->time_to_sleep)
//         return (error_exit("Error: Values must be > 0"), 0);
//     if (av[5])
//     {
//         p->share->must_eat = ft_atoi(av[5]) * 1000;
//         if (p->share->must_eat <= 0)
//             return (error_exit("Error: (must_eat) must be > 0"), 0);
//     }
//     else
//         p->share->must_eat = -1;
//     return (1);
// }

==> routine.c <==
#include "philo.h"

void *routine(void *arg)
{
    t_philo *s = (t_philo *)arg;
    while (1)
    {
        if (s->died == 1)
            break ;
        printf("philo number %d is thinking\n", s->id);
        printf("philo number %d has taken a fork\n", s->id);
        pthread_mutex_lock(&s->share->forks[s->left_fork]);
        pthread_mutex_lock(&s->share->forks[s->right_fork]);
        printf("philo number %d is eating\n", s->id);
        usleep(s->share->time_to_eat);
        if (s->died == 1)
            break ;
        pthread_mutex_unlock(&s->share->forks[s->left_fork]);
        pthread_mutex_unlock(&s->share->forks[s->right_fork]);
        s->last_meal = get_time();
        printf("philo number %d is sleeping\n", s->id);
        usleep(s->share->time_to_sleep);
        if (s->died == 1)
            break ;
    }
    return NULL;
}
==> simulation.c <==
#include "philo.h"

int check_for_die(t_philo *p)
{
    int i;
    int time;

    i = 0;
    time = 0;
    while(p->share->philos > i)
    {
        time = get_time() - p->share->starting_time - p->last_meal;
        if(time > p->share->time_to_die)
        {
            p->died = 1;
            return 0;
        }
    }
    return 1;
}

void start_simulation(t_philo *p)
{
    int i;
    
    i = 0;
    if (p->share->must_eat == 0)
        return ;
    // else if (s->must_eat == 1)
    else
    {
        while (p->share->philos > i)
        {
            p[i].id = i;
            pthread_create(&p[i].thread_id, NULL, &routine, &p[i]);
            i++;
        }
    }
}
==> utlis.c <==
#include "philo.h"

void	ft_bzero(void *s, size_t n)
{
	memset(s, 0, n);
}

int	ft_atoi(const char *str)
{
	size_t	i;
	long	result;
	int		sign;

	sign = 1;
	result = 0;
	i = 0;
	while ((str[i] >= 9 && str[i] <= 13) || str[i] == 32)
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
			sign = -1;
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		result = result * 10 + (str[i] - '0');
		if (sign == 1 && result > INT_MAX)
		{
			error_exit("Error: Values must be < 2147483647");
			return (exit(1), 0);
		}
		i++;
	}
	return ((int)(result * sign));
}


long long   get_time(void)
{
    struct timeval tv;
	
    gettimeofday(&tv, NULL);
    return (tv.tv_sec * 1000) + (tv.tv_usec / 1000);
}

int	ft_isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}

==> philo.h <==
#ifndef PHILO_H
# define PHILO_H


# define TAB '\t'
# define BACKSPACE '\b'
# define CARRIAGE '\r'
# define SPACE ' '
# include <pthread.h>
# include <unistd.h>
# include <stdio.h>
# include <time.h>
# include <sys/time.h>
# include <string.h>
# include <limits.h>
# include <stdlib.h> 
# include <stdbool.h>
# include <errno.h>

typedef pthread_mutex_t t_mtx;

typedef struct s_share
{
    int         philos;
    int         time_to_die;
    int         time_to_eat;
    long long   start_eating;
    int         time_to_sleep;
    int         must_eat;
    int         sim_stop;
    t_mtx       stop_mtx;
    long long   starting_time;
    t_mtx *forks;
}t_share;

typedef struct s_philo
{
    int id;
    int meals_count;
    bool full;
    int left_fork;
    int right_fork;
    int died;
    long long   last_meal;
    t_mtx   meal_mtx;
    pthread_t thread_id;
    t_share *share;
} t_philo;



int 	ft_atoi(const char *str);
int 	ft_isdigit(int c);
int     check(char **av, int ac);
void	ft_bzero(void *s, size_t n);
void    *routine(void *arg);
void	*safe_malloc(size_t size);
void    error_exit(char *error);
void    start_simulation(t_philo *p);
int     parsing(t_philo *p, char **av);
t_philo *philo(t_philo *p, char **av);
// void	safe_mutex(t_mtx *mutex, t_mutex opcode);
// void handle_mutex_error(int status, t_mutex opcode);
void    data_init(t_philo *p);
long long   get_time(void);
int check_for_die(t_philo *p);
#endif
==> Makefile <==
clean:
	rm -f $(OBJS)

fclean: clean
	rm -f $(NAME)

re: fclean all
